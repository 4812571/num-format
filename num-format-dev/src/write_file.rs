use std::fs;
use std::io::Write;
use std::path::Path;

use itertools::Itertools;
use serde_json;

use crate::types::{Locale, Policy};

pub(crate) fn write_file<P>(out_path: P, mut data: Vec<(Locale, Policy)>)
where
    P: AsRef<Path>,
{
    let mut buf = String::new();

    buf.push_str("// Autogenerated by num-display-dev\n\n");
    buf.push_str("use std::str::FromStr;\n\n");

    // pub enum Locale...
    data.sort_by(|a, b| {
        a.0.identifier
            .to_lowercase()
            .cmp(&b.0.identifier.to_lowercase())
    });
    buf.push_str("/// Enum representing format settings from the\n");
    buf.push_str("/// [Unicode Common Locale Data Repository (CLDR)](http://cldr.unicode.org/).\n");
    buf.push_str("/// Implements `Format`.\n");
    buf.push_str("#[allow(non_camel_case_types)]\n");
    buf.push_str("pub enum Locale {\n");
    for identifier in data.iter().map(|x| &x.0.identifier).unique() {
        buf.push_str("    ");
        if identifier.chars().nth(0).unwrap().is_numeric() {
            buf.push_str("_");
        }
        if identifier.contains('-') {
            let identifier = identifier.replace("-", "_");
            buf.push_str(&identifier);
        } else {
            buf.push_str(identifier);
        }
        buf.push_str(",\n");
    }
    buf.push_str("}\n\n");

    let mut file = fs::File::create(out_path).unwrap();
    file.write_all(buf.as_bytes()).unwrap();
}
